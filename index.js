const express = require('express');
const xlsx = require('xlsx');
const path = require('path');

const app = express();
const port = 3000;

const requestTypeToPerson = {
  'ƒê∆°n ho√£n thi': 'Ca Ph√∫ Ph√°t',
  'ƒê∆°n ƒë·ªÅ ngh·ªã th√¥i h·ªçc': 'ƒê·∫∑ng Ph∆∞∆°ng Du',
  'Nh·∫≠p h·ªçc l·∫°i (sau khi ngh·ªâ h·ªçc t·∫°m th·ªùi)': 'ƒê·∫∑ng Ph∆∞∆°ng Du',
  'ƒê∆°n ngh·ªâ h·ªçc t·∫°m th·ªùi': 'ƒê·∫∑ng Ph∆∞∆°ng Du',
  'ƒê∆°n ƒêƒÉng k√Ω thi KNTHCM': 'Nguy·ªÖn Th·ªã Kim Tuy·∫øn',
  'ƒê∆°n xin c·∫•p gi·∫•y ch·ª©ng nh·∫≠n t·ªët nghi·ªáp t·∫°m th·ªùi': 'Nguy·ªÖn Th·ªã Kim Tuy·∫øn',
  'X√°c nh·∫≠n t√¨nh h√¨nh n·ª£ m√¥n h·ªçc': 'Nguy·ªÖn Th·ªã Kim Tuy·∫øn',
  'ƒê∆°n ƒëƒÉng k√Ω m√¥n thay th·∫ø t·ªët nghi·ªáp': 'Nguy·ªÖn VƒÉn Khoa',
  'Chuy·ªÉn nh√≥m m√¥n h·ªçc': 'Nguy·ªÖn Th·ªßy Kim Tuy·ªÅn',
  'ƒê∆°n xin ƒëƒÉng k√Ω m√¥n h·ªçc tr·ªÖ h·∫°n': 'Nguy·ªÖn Th·ªßy Kim Tuy·ªÅn',
  'ƒê∆°n ƒë·ªÅ ngh·ªã mi·ªÖn/chuy·ªÉn ƒëi·ªÉm h·ªçc ph·∫ßn': 'Ph·∫°m Uy√™n Thy',
  'X√°c nh·∫≠n li√™n quan ƒë·∫øn tuy·ªÉn sinh': 'Ph√πng VƒÉn Tr√∫c',
  'ƒêƒÉng k√Ω ti·∫øng Anh b·ªï sung': 'Ph·∫°m Th·ªã Kim ƒêi·ªáp',
  'ƒê∆°n ƒë·ªÅ ngh·ªã mi·ªÖn Ti·∫øng Anh': 'Ph·∫°m Uy√™n Thy',
  'H·ªßy l·ªãch h·ªçc Ti·∫øng Anh': 'Ph·∫°m Th·ªã Kim ƒêi·ªáp',
};

const keepColumns = [
  'Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n',
  'S·ªë BN',
  'Lo·∫°i ƒë∆°n (T√™n ƒë∆°n)',
  'MSSV',
  'H·ªç v√† t√™n'
];

function filterObject(obj) {
  Object.keys(obj)
    .filter(key => !keepColumns.includes(key))
    .forEach(key => delete obj[key]);
  return obj;
}

function replacePerson(obj) {
  if (obj['Lo·∫°i ƒë∆°n (T√™n ƒë∆°n)'] in requestTypeToPerson) {
    obj['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n'] = requestTypeToPerson[obj['Lo·∫°i ƒë∆°n (T√™n ƒë∆°n)']];
  }
  return obj;
}

// Set EJS as the view engine
app.set('view engine', 'ejs');

// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));


function getArrayOfObjects(sheet) {
  const jsonArray = xlsx.utils.sheet_to_json(sheet, { header: 1 });

  // Extract headers from the first row
  const headers = jsonArray[0];

  // Remove the headers from the array
  const data = jsonArray.slice(1);

  // Convert each row to an object
  const arrayOfObjects = data.map(row => {
    const obj = {};
    headers.forEach((header, index) => {
      obj[header] = row[index];
    });
    return obj;
  });

  return arrayOfObjects;
}

app.get('/table', (req, res) => {
  // Read the Excel file
  const workbook = xlsx.readFile('DS_NopDon.xlsx');
  // const workbook = xlsx.readFile('DS_NopDon (1).xlsx');
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];

  const processedData = getArrayOfObjects(sheet);

  // Filter out columns that are not needed
  processedData.forEach(obj => filterObject(obj));

  // Replace the person who will handle the request
  processedData.forEach(obj => replacePerson(obj));

  processedData.sort((a, b) => {
    if (a['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n'] < b['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n']) {
      return -1;
    }
    if (a['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n'] > b['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n']) {
      return 1;
    }
    return 0;
  });

  // Define an object with all keys from the first object in processedData set to ''
  const emptyObj = Object.fromEntries(Object.keys(processedData[0]).map(key => [key, '']));

  let prevPerson = null;
  for (let i = 0; i < processedData.length; i++) {
    if (prevPerson !== null && processedData[i]['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n'] !== prevPerson) {
      processedData.splice(i, 0, { ...emptyObj });
      i++; // Skip the newly inserted empty object
    }
    prevPerson = processedData[i]['Ng∆∞·ªùi gi·∫£i quy·∫øt ƒë∆°n'];
  }

  processedData.unshift(emptyObj);

  console.log(`üöÄ üöÄ file: index.js:79 üöÄ app.get üöÄ processedData`, processedData);

  res.render('table', { data: processedData });
});

// Define a route to render the Excel data in a table
app.get('/', (req, res) => {
  // Read the Excel file
  // const workbook = xlsx.readFile('DS_NopDon.xlsx');
  const workbook = xlsx.readFile('DS_NopDon.xlsx');
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];

  const processedData = getArrayOfObjects(sheet);
  res.render('index', { data: processedData });
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
